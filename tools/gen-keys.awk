#!/usr/bin/awk -f

# Usage:
#  ./tools/gen-keys.awk /usr/include/linux/input-event-codes.h | clang-format - > ./devices/inputs-event-codes.ixx

BEGIN {
    CURRENT_TIME = systime()

    # HST to UTC = +10 hours = 10 * 3600 seconds
    TIME_OFFSET = 10 * 3600
    ADJUSTED_TIME = CURRENT_TIME + TIME_OFFSET
    DATE_STR = strftime("%A, %B %d, %Y, %I:%M %p UTC", ADJUSTED_TIME)

    # Header content
    print "// Auto-generated by ./tools/gen-keys.awk on " DATE_STR
    print "module;"
    print "#include <string_view>"
    print "#include <cstdint>"
    print "#include <array>"
    print "#include <linux/input-event-codes.h>"
    print "export module foresight.devices.event_codes;"
    print
    print "export namespace foresight {"
    print "\tstruct keynames_type {";
    print "\t\tstd::string_view name;";
    print "\t\tstd::uint16_t value;";
    print "\t};"
}

# Skip preprocessor directives and empty lines
/^[ \t]*(#if|#endif|#else|#elif|#pragma)/ { next; }
/^[ \t]*$/ { next; }

# Pattern for matching key defines
/^[ \t]*#define[ \t]+(KEY_[^\s]+)[ \t]+(0x[0-9a-fA-F]+|[0-9]+)/ {
    stripped_name = $2
    gsub("KEY_", "", stripped_name)
    lower_name = tolower(stripped_name)
    entries[lower_name] = sprintf("\t\t{.name = {\"%s\"}, .value = %s}, // %s", lower_name, $2, $3);
    next;
}

/^[ \t]*#define[ \t]+(BTN_[^\s]+)[ \t]+(0x[0-9a-fA-F]+|[0-9]+)/ {
    stripped_name = $2
    gsub("BTN_", "", stripped_name)
    lower_name = tolower(stripped_name)
    entries[lower_name] = sprintf("\t\t{.name = {\"%s\"}, .value = %s}, // %s", lower_name, $2, $3);
    next;
}

END {
    # Sort the keys alphabetically and print the entries
    n = asorti(entries, sorted_keys)
    print "\tconstexpr std::array<keynames_type, " n "> keynames = {{";
    for (i = 1; i <= n; i++) {
        # Remove the trailing comma from the last entry
        entry = entries[sorted_keys[i]]
        if (i == n) {
            sub(/,$/, "", entry)
        }
        printf "%s\n", entry
    }
    print "\t}};";
    print "} // namespace foresight"
}